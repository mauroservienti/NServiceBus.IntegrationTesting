[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("NServiceBus.IntegrationTesting.Tests")]
namespace NServiceBus.IntegrationTesting
{
    public class EmptyTestCompletionHandler : NServiceBus.IntegrationTesting.IHandleTestCompletion
    {
        public EmptyTestCompletionHandler() { }
        public System.Threading.Tasks.Task OnTestCompleted(NServiceBus.AcceptanceTesting.Support.RunSummary summary) { }
    }
    public static class EndpointConfigurationExtensions
    {
        public static void RegisterRequiredPipelineBehaviors(this NServiceBus.EndpointConfiguration builder, string endpointName, NServiceBus.IntegrationTesting.IntegrationScenarioContext integrationScenarioContext) { }
        public static void RegisterScenarioContext(this NServiceBus.EndpointConfiguration builder, NServiceBus.AcceptanceTesting.ScenarioContext scenarioContext) { }
    }
    public class EndpointReference
    {
        public static NServiceBus.IntegrationTesting.EndpointReference FromSolutionProject(string projectName) { }
    }
    public abstract class EndpointTemplate : NServiceBus.AcceptanceTesting.Support.IEndpointSetupTemplate
    {
        protected EndpointTemplate() { }
        public System.Threading.Tasks.Task<NServiceBus.EndpointConfiguration> GetConfiguration(NServiceBus.AcceptanceTesting.Support.RunDescriptor runDescriptor, NServiceBus.AcceptanceTesting.Support.EndpointCustomizationConfiguration endpointCustomizationConfiguration, System.Action<NServiceBus.EndpointConfiguration> configurationBuilderCustomization) { }
        protected abstract System.Threading.Tasks.Task<NServiceBus.EndpointConfiguration> OnGetConfiguration(NServiceBus.AcceptanceTesting.Support.RunDescriptor runDescriptor, NServiceBus.AcceptanceTesting.Support.EndpointCustomizationConfiguration endpointCustomizationConfiguration, System.Action<NServiceBus.EndpointConfiguration> configurationBuilderCustomization);
    }
    public class EndpointTemplate<T> : NServiceBus.IntegrationTesting.EndpointTemplate
        where T : NServiceBus.EndpointConfiguration, new ()
    {
        public EndpointTemplate() { }
        protected override System.Threading.Tasks.Task<NServiceBus.EndpointConfiguration> OnGetConfiguration(NServiceBus.AcceptanceTesting.Support.RunDescriptor runDescriptor, NServiceBus.AcceptanceTesting.Support.EndpointCustomizationConfiguration endpointCustomizationConfiguration, System.Action<NServiceBus.EndpointConfiguration> configurationBuilderCustomization) { }
    }
    public class EndpointTemplate<T, C> : NServiceBus.IntegrationTesting.EndpointTemplate<T>
        where T : NServiceBus.EndpointConfiguration, new ()
        where C : NServiceBus.IntegrationTesting.IHandleTestCompletion, new ()
    {
        public EndpointTemplate() { }
        protected override System.Threading.Tasks.Task<NServiceBus.EndpointConfiguration> OnGetConfiguration(NServiceBus.AcceptanceTesting.Support.RunDescriptor runDescriptor, NServiceBus.AcceptanceTesting.Support.EndpointCustomizationConfiguration endpointConfiguration, System.Action<NServiceBus.EndpointConfiguration> configurationBuilderCustomization) { }
    }
    public class GenericHostEndpointBehaviorBuilder<TContext>
        where TContext : NServiceBus.AcceptanceTesting.ScenarioContext
    {
        public GenericHostEndpointBehaviorBuilder() { }
        public System.Collections.Generic.IList<NServiceBus.AcceptanceTesting.Support.IWhenDefinition> Whens { get; }
        public NServiceBus.IntegrationTesting.GenericHostEndpointBehaviorBuilder<TContext> When(System.Func<NServiceBus.IMessageSession, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.GenericHostEndpointBehaviorBuilder<TContext> When(System.Func<NServiceBus.IMessageSession, TContext, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.GenericHostEndpointBehaviorBuilder<TContext> When(System.Func<TContext, System.Threading.Tasks.Task<bool>> condition, System.Func<NServiceBus.IMessageSession, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.GenericHostEndpointBehaviorBuilder<TContext> When(System.Func<TContext, System.Threading.Tasks.Task<bool>> condition, System.Func<NServiceBus.IMessageSession, TContext, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.GenericHostEndpointBehaviorBuilder<TContext> When(System.Predicate<TContext> condition, System.Func<NServiceBus.IMessageSession, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.GenericHostEndpointBehaviorBuilder<TContext> When(System.Predicate<TContext> condition, System.Func<NServiceBus.IMessageSession, TContext, System.Threading.Tasks.Task> action) { }
    }
    public class HandlerInvocation : NServiceBus.IntegrationTesting.Invocation
    {
        public HandlerInvocation() { }
        public System.Type HandlerType { get; set; }
    }
    public interface IHandleTestCompletion
    {
        System.Threading.Tasks.Task OnTestCompleted(NServiceBus.AcceptanceTesting.Support.RunSummary summary);
    }
    public interface IRemoteEndpointWhenDefinition
    {
        System.Guid Id { get; }
        System.Threading.Tasks.Task<bool> ExecuteAction(NServiceBus.IntegrationTesting.IntegrationScenarioContext context, NServiceBus.IntegrationTesting.IRemoteMessageSessionProxy session);
    }
    public class IntegrationScenarioContext : NServiceBus.AcceptanceTesting.ScenarioContext
    {
        public IntegrationScenarioContext() { }
        public System.Collections.Generic.IEnumerable<NServiceBus.IntegrationTesting.HandlerInvocation> InvokedHandlers { get; }
        public System.Collections.Generic.IEnumerable<NServiceBus.IntegrationTesting.SagaInvocation> InvokedSagas { get; }
        public System.Collections.Generic.IEnumerable<NServiceBus.IntegrationTesting.OutgoingMessageOperation> OutgoingMessageOperations { get; }
        public System.Collections.Generic.IEnumerable<NServiceBus.IntegrationTesting.RemoteOutgoingMessageOperation> RemoteOutgoingMessageOperations { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> GetProperties(string endpointName) { }
        public bool HandlerWasInvoked<THandler>() { }
        public bool HasFailedMessages() { }
        public bool HasHandlingErrors() { }
        public bool MessageWasProcessed<TMessage>() { }
        public bool MessageWasProcessedByHandler<TMessage, THandler>() { }
        public bool MessageWasProcessedBySaga<TMessage, TSaga>() { }
        public void RegisterTimeoutRescheduleRule<TTimeout>(System.Func<object, NServiceBus.DelayedDelivery.DoNotDeliverBefore, NServiceBus.DelayedDelivery.DoNotDeliverBefore> rule) { }
        public bool SagaWasCompleted<TSaga>()
            where TSaga : NServiceBus.Saga { }
        public bool SagaWasInvoked<TSaga>()
            where TSaga : NServiceBus.Saga { }
    }
    public abstract class Invocation
    {
        protected Invocation() { }
        public string EndpointName { get; set; }
        public System.Exception HandlingError { get; set; }
        public object Message { get; set; }
        public System.Type MessageType { get; set; }
    }
    public class OutOfProcessEndpointBehaviorBuilder<TContext>
        where TContext : NServiceBus.IntegrationTesting.IntegrationScenarioContext
    {
        public OutOfProcessEndpointBehaviorBuilder() { }
        public System.Collections.Generic.IList<NServiceBus.IntegrationTesting.IRemoteEndpointWhenDefinition> Whens { get; }
        public NServiceBus.IntegrationTesting.OutOfProcessEndpointBehaviorBuilder<TContext> When(System.Func<NServiceBus.IntegrationTesting.IRemoteMessageSessionProxy, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.OutOfProcessEndpointBehaviorBuilder<TContext> When(System.Func<NServiceBus.IntegrationTesting.IRemoteMessageSessionProxy, TContext, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.OutOfProcessEndpointBehaviorBuilder<TContext> When(System.Func<TContext, System.Threading.Tasks.Task<bool>> condition, System.Func<NServiceBus.IntegrationTesting.IRemoteMessageSessionProxy, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.OutOfProcessEndpointBehaviorBuilder<TContext> When(System.Func<TContext, System.Threading.Tasks.Task<bool>> condition, System.Func<NServiceBus.IntegrationTesting.IRemoteMessageSessionProxy, TContext, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.OutOfProcessEndpointBehaviorBuilder<TContext> When(System.Predicate<TContext> condition, System.Func<NServiceBus.IntegrationTesting.IRemoteMessageSessionProxy, System.Threading.Tasks.Task> action) { }
        public NServiceBus.IntegrationTesting.OutOfProcessEndpointBehaviorBuilder<TContext> When(System.Predicate<TContext> condition, System.Func<NServiceBus.IntegrationTesting.IRemoteMessageSessionProxy, TContext, System.Threading.Tasks.Task> action) { }
    }
    public abstract class OutgoingMessageOperation
    {
        protected OutgoingMessageOperation() { }
        public System.Collections.Generic.Dictionary<string, string> MessageHeaders { get; set; }
        public string MessageId { get; set; }
        public object MessageInstance { get; set; }
        public System.Type MessageType { get; set; }
        public System.Exception OperationError { get; set; }
        public string SenderEndpoint { get; set; }
    }
    public class PublishOperation : NServiceBus.IntegrationTesting.OutgoingMessageOperation
    {
        public PublishOperation() { }
    }
    public abstract class RemoteOutgoingMessageOperation
    {
        protected RemoteOutgoingMessageOperation() { }
        public System.Collections.Generic.Dictionary<string, string> MessageHeaders { get; set; }
        public string MessageId { get; set; }
        public string MessageInstanceJson { get; set; }
        public string MessageTypeAssemblyQualifiedName { get; set; }
        public string OperationErrorJson { get; set; }
        public string OperationErrorTypeAssemblyQualifiedName { get; set; }
        public string SenderEndpoint { get; set; }
    }
    public class RemotePublishOperation : NServiceBus.IntegrationTesting.RemoteOutgoingMessageOperation
    {
        public RemotePublishOperation() { }
    }
    public class RemoteReplyOperation : NServiceBus.IntegrationTesting.RemoteOutgoingMessageOperation
    {
        public RemoteReplyOperation() { }
    }
    public class RemoteRequestTimeoutOperation : NServiceBus.IntegrationTesting.RemoteSendOperation
    {
        public RemoteRequestTimeoutOperation() { }
        public string SagaId { get; set; }
        public string SagaTypeAssemblyQualifiedName { get; set; }
    }
    public class RemoteSendOperation : NServiceBus.IntegrationTesting.RemoteOutgoingMessageOperation
    {
        public RemoteSendOperation() { }
    }
    public class ReplyOperation : NServiceBus.IntegrationTesting.OutgoingMessageOperation
    {
        public ReplyOperation() { }
    }
    public class RequestTimeoutOperation : NServiceBus.IntegrationTesting.SendOperation
    {
        public RequestTimeoutOperation() { }
        public string SagaId { get; set; }
        public string SagaTypeAssemblyQualifiedName { get; set; }
    }
    public class SagaInvocation : NServiceBus.IntegrationTesting.Invocation
    {
        public SagaInvocation() { }
        public bool IsCompleted { get; set; }
        public bool IsNew { get; set; }
        public bool NotFound { get; set; }
        public object SagaData { get; set; }
        public System.Type SagaType { get; set; }
    }
    public static class ScenarioWithEndpointBehaviorExtensions
    {
        public static NServiceBus.AcceptanceTesting.Support.IScenarioWithEndpointBehavior<TContext> WithGenericHostEndpoint<TContext>(this NServiceBus.AcceptanceTesting.Support.IScenarioWithEndpointBehavior<TContext> scenarioWithEndpoint, string endpointName, System.Func<System.Action<NServiceBus.EndpointConfiguration>, Microsoft.Extensions.Hosting.IHost> hostBuilder, System.Action<NServiceBus.IntegrationTesting.GenericHostEndpointBehaviorBuilder<TContext>> behavior = null)
            where TContext : NServiceBus.AcceptanceTesting.ScenarioContext { }
        public static NServiceBus.AcceptanceTesting.Support.IScenarioWithEndpointBehavior<TContext> WithOutOfProcessEndpoint<TContext>(this NServiceBus.AcceptanceTesting.Support.IScenarioWithEndpointBehavior<TContext> scenarioWithEndpoint, string endpointName, NServiceBus.IntegrationTesting.EndpointReference endpointReference, System.Action<NServiceBus.IntegrationTesting.OutOfProcessEndpointBehaviorBuilder<TContext>> behavior = null)
            where TContext : NServiceBus.IntegrationTesting.IntegrationScenarioContext { }
    }
    public class SendOperation : NServiceBus.IntegrationTesting.OutgoingMessageOperation
    {
        public SendOperation() { }
    }
}